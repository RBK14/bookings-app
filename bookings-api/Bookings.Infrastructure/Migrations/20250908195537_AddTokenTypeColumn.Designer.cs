// <auto-generated />
using System;
using Bookings.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookings.Infrastructure.Migrations
{
    [DbContext(typeof(BookingsDbContext))]
    [Migration("20250908195537_AddTokenTypeColumn")]
    partial class AddTokenTypeColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookings.Domain.AppointmentAggregate.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CancelledBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OfferDuration")
                        .HasColumnType("time")
                        .HasColumnName("Duration");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Id");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.ClientAggregate.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.EmployeeAggregate.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.OfferAggregate.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("Duration");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Id");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.ScheduleAggregate.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Id");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.VerificationTokenAggregate.VerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("UsedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("VerificationTokens", (string)null);
                });

            modelBuilder.Entity("Bookings.Domain.AppointmentAggregate.Appointment", b =>
                {
                    b.OwnsOne("Bookings.Domain.Common.ValueObjects.Price", "OfferPrice", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .IsUnicode(false)
                                .HasColumnType("varchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.OwnsOne("Bookings.Domain.AppointmentAggregate.ValueObjects.AppointmentTime", "Time", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasPrecision(0)
                                .HasColumnType("datetime2(0)")
                                .HasColumnName("EndTime");

                            b1.Property<DateTime>("Start")
                                .HasPrecision(0)
                                .HasColumnType("datetime2(0)")
                                .HasColumnName("StartTime");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("OfferPrice")
                        .IsRequired();

                    b.Navigation("Time")
                        .IsRequired();
                });

            modelBuilder.Entity("Bookings.Domain.ClientAggregate.Client", b =>
                {
                    b.OwnsMany("Bookings.Domain.AppointmentAggregate.ValueObjects.AppointmentId", "AppointmentIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1000L);

                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AppointmentId");

                            b1.HasKey("Id");

                            b1.HasIndex("ClientId");

                            b1.ToTable("ClientAppointmentIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("AppointmentIds");
                });

            modelBuilder.Entity("Bookings.Domain.EmployeeAggregate.Employee", b =>
                {
                    b.OwnsMany("Bookings.Domain.AppointmentAggregate.ValueObjects.AppointmentId", "AppointmentIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1000L);

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AppointmentId");

                            b1.HasKey("Id");

                            b1.HasIndex("EmployeeId");

                            b1.ToTable("EmployeeAppointmentIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsMany("Bookings.Domain.OfferAggregate.ValueObjects.OfferId", "OfferIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1000L);

                            b1.Property<Guid>("EmployeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("OfferId");

                            b1.HasKey("Id");

                            b1.HasIndex("EmployeeId");

                            b1.ToTable("EmployeeOfferIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("AppointmentIds");

                    b.Navigation("OfferIds");
                });

            modelBuilder.Entity("Bookings.Domain.OfferAggregate.Offer", b =>
                {
                    b.OwnsMany("Bookings.Domain.AppointmentAggregate.ValueObjects.AppointmentId", "AppointmentIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1000L);

                            b1.Property<Guid>("OfferId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AppointmentId");

                            b1.HasKey("Id");

                            b1.HasIndex("OfferId");

                            b1.ToTable("OfferAppointmentIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OfferId");
                        });

                    b.OwnsOne("Bookings.Domain.Common.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("OfferId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .IsUnicode(false)
                                .HasColumnType("varchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("OfferId");

                            b1.ToTable("Offers");

                            b1.WithOwner()
                                .HasForeignKey("OfferId");
                        });

                    b.Navigation("AppointmentIds");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Bookings.Domain.ScheduleAggregate.Schedule", b =>
                {
                    b.OwnsMany("Bookings.Domain.ScheduleAggregate.Entities.WorkDayOverride", "Overrides", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("OverrideId");

                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<TimeSpan>("End")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("Start")
                                .HasColumnType("time");

                            b1.HasKey("Id", "ScheduleId");

                            b1.HasIndex("ScheduleId");

                            b1.ToTable("Overrides", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");
                        });

                    b.OwnsMany("Bookings.Domain.ScheduleAggregate.Entities.WorkDaySchedule", "DefaultSchedules", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("DefaultScheduleId");

                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("DayOfWeek")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("End")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("Start")
                                .HasColumnType("time");

                            b1.HasKey("Id", "ScheduleId");

                            b1.HasIndex("ScheduleId");

                            b1.ToTable("DefaultSchedules", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");
                        });

                    b.OwnsMany("Bookings.Domain.ScheduleAggregate.Entities.WorkSlot", "Slots", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("SlotId");

                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasPrecision(0)
                                .HasColumnType("datetime2(0)");

                            b1.Property<DateTime>("Start")
                                .HasPrecision(0)
                                .HasColumnType("datetime2(0)");

                            b1.HasKey("Id", "ScheduleId");

                            b1.HasIndex("ScheduleId");

                            b1.ToTable("Slots", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");
                        });

                    b.Navigation("DefaultSchedules");

                    b.Navigation("Overrides");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Bookings.Domain.UserAggregate.User", b =>
                {
                    b.OwnsOne("Bookings.Domain.Common.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("Phone");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Bookings.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("Bookings.Domain.VerificationTokenAggregate.ValueObjects.VerificationTokenId", "VerificationTokenIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1000L);

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("VerificationTokenId");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserVerificationTokenIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("VerificationTokenIds");
                });

            modelBuilder.Entity("Bookings.Domain.VerificationTokenAggregate.VerificationToken", b =>
                {
                    b.OwnsOne("Bookings.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("VerificationTokenId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Email");

                            b1.HasKey("VerificationTokenId");

                            b1.ToTable("VerificationTokens");

                            b1.WithOwner()
                                .HasForeignKey("VerificationTokenId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
